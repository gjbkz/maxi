# https://aws.amazon.com/jp/blogs/compute/working-with-aws-lambda-and-lambda-layers-in-aws-sam/
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  DomainName:
    Type: String
    Default: maxi.wemo.me
  DomainCertificateArn:
    Type: String
    Default: arn:aws:acm:us-east-1:524477122200:certificate/1be240ce-cbae-4099-b57f-3d66e61d8c99
  HostedZoneName:
    Type: String
    Default: wemo.me.

Globals:
  Function:
    Timeout: 6
    Runtime: nodejs8.10

Resources:
  APIDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref DomainCertificateArn
      DomainName: !Ref DomainName
  APIBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref APIDomainName
      RestApiId: !Ref ServerlessRestApi
      Stage: Prod
  APIDomain:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Ref HostedZoneName
      RecordSets:
      - Name: !Ref DomainName
        Type: A
        AliasTarget:
          DNSName: !GetAtt APIDomainName.DistributionDomainName
          HostedZoneId: !GetAtt APIDomainName.DistributionHostedZoneId
  FunctionExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  ServerDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: maxi-server-dependencies
      ContentUri: layer
      CompatibleRuntimes:
        - nodejs8.10
      RetentionPolicy: Retain
  AppHTMLFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lib/
      Handler: app.handler
      Layers: [!Ref ServerDependenciesLayer]
      Role: {'Fn::GetAtt': ['FunctionExecutionRole', 'Arn']}
      Events:
        HttpGetRoot:
          Type: Api
          Properties:
            Path: /
            Method: get
        HttpGetObject:
          Type: Api
          Properties:
            Path: /objects/{objectId}
            Method: get
  FluxFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lib/
      Handler: flux.handler
      Layers: [!Ref ServerDependenciesLayer]
      Role: {'Fn::GetAtt': ['FunctionExecutionRole', 'Arn']}
      Events:
        HttpGet:
          Type: Api
          Properties:
            Path: /objects/{objectId}/flux
            Method: get
  SitemapFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lib/
      Handler: sitemap.handler
      Layers: [!Ref ServerDependenciesLayer]
      Role: {'Fn::GetAtt': ['FunctionExecutionRole', 'Arn']}
      Events:
        HttpGet:
          Type: Api
          Properties:
            Path: /sitemap.xml
            Method: get
